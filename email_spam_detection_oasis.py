# -*- coding: utf-8 -*-
"""EMAIL SPAM DETECTION-OASIS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14dhuUNjvA9mn9Zw0toWKaqfaYgT0vNv7
"""

import pandas as pd
edata=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/DATASETS/spam.csv",encoding='latin-1')

edata

edata.info()

edata.head()

"""**CLEANING THE DATA**"""

edata.drop(['Unnamed: 2', 'Unnamed: 3','Unnamed: 4'],axis=1,inplace=True)   #Cleaning the data

edata.rename(columns={'v1':'target', 'v2':'text'},inplace=True)

from sklearn.preprocessing import LabelEncoder
enc=LabelEncoder()
edata.text = enc.fit_transform(edata.text)
edata.target = enc.fit_transform(edata.target)

edata.isnull().sum()          #To check out Missing Values

edata.duplicated().sum()     #To Check out duplicacy

edata.drop_duplicates()

"""# **EXPLORATORY DATA ANALYSIS**"""

edata['target'].value_counts()      # ham msgs are more compared to  spam

import matplotlib.pyplot as plt
plt.pie(edata['target'].value_counts(),labels=['ham','spam'],autopct="%0.2f")
plt.show()

edata['num_char'] = edata['text'].apply(len)
edata.head()

import nltk

nltk.download('punkt')

# edata['num_words'] = edata['text'].apply(lambda x : len(nltk.word_tokenize(x)))
# edata.head()

# edata['num_sent'] = edata['text'].apply(lambda x : len(nltk.sent_tokenize(x)))
# edata.head()

edata.describe()

# edata[edata['target']==1][['num_char','num_words' ,'num_sent']].describe()    #spam

# edata[edata['target'] == 0][['num_char','num_words','num_sent']].describe()          #ham

import seaborn as sns
sns.heatmap(edata.corr())

x=edata.drop(['target'],axis=1)
x

y=edata['target']
y

"""# **REGRESSION MODELS**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm  import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.feature_extraction.text import CountVectorizer        # NaiveBayes

from sklearn.metrics import accuracy_score

x_train,x_test,y_train,y_test=train_test_split(x,y)

model1=SVC()   #kernal,gamma
model1.fit(x_train,y_train)
y_predict=model1.predict(x_test)
score1=accuracy_score(y_test,y_predict)*100
score1

model2=RandomForestClassifier()
model2.fit(x_train,y_train)
y_predict=mode2.predict(x_test)
score2=accuracy_score(y_test,y_predict)*100
score2

model3=KNeighborsClassifier(n_neighbors=1)
model3.fit(x_train,y_train)
y_predict=model3.predict(x_test)
score3=accuracy_score(y_test,y_predict)*100
score3

model4=DecisionTreeClassifier()
model4.fit(x_train,y_train)
y_predict=mode14.predict(x_test)
score4=accuracy_score(y_test,y_predict)*100
score4

from sklearn.naive_bayes import MultinomialNB,GaussianNB,BernoulliNB
model5=MultinomialNB()
model5.fit(x_train,y_train)
y_predict=model5.predict(x_test)
score5=accuracy_score(y_test,y_predict)*100
score5

"""# **CONCLUSION**

AS COMPARED TO ALL THE CLASSIFICATION MODELS RANDOMFOREST CLASSIFIER HAS GIVEN THE BEST ACCURACY WITH 94 ... HENCE RANDOMFOREST CLASSIFIER IS THE BEST MODEL FOR THE 'EMAIL SPAM DETECTION'
"""